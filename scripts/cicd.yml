name: SalesMaster & TeamHub CI/CD

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        type: choice
        required: true
        default: 'staging'
        options:
          - staging
          - production

env:
  NODE_VERSION: '20' # Consistent Node.js version for Node.js based projects
  AWS_REGION: 'us-east-1' # Default AWS region, adjust as needed

jobs:
  lint-and-test:
    name: Lint & Test ${{ matrix.project }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        project: [mobile, web-admin, backend]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: '${{ matrix.project }}/package-lock.json' # Cache dependencies per project

      - name: Install dependencies
        working-directory: ${{ matrix.project }}
        run: npm ci

      - name: Run linter
        working-directory: ${{ matrix.project }}
        run: npm run lint
        continue-on-error: true # Allow linting to fail but continue for tests

      - name: Run unit tests
        working-directory: ${{ matrix.project }}
        run: npm run test

  build:
    name: Build ${{ matrix.project }}
    runs-on: ubuntu-latest
    needs: lint-and-test # Depends on successful linting and testing
    strategy:
      matrix:
        project: [mobile, web-admin, backend]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # --- Backend Build Steps ---
      - name: Configure AWS credentials (Backend)
        if: matrix.project == 'backend'
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR (Backend)
        if: matrix.project == 'backend'
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and Push Docker image (Backend)
        if: matrix.project == 'backend'
        env:
          REPOSITORY_NAME: salesmaster-teamhub-backend
          IMAGE_TAG: ${{ github.sha }} # Using commit SHA for unique tag
        working-directory: backend
        run: |
          docker build -t $REPOSITORY_NAME:$IMAGE_TAG .
          docker tag $REPOSITORY_NAME:$IMAGE_TAG ${{ secrets.ECR_REGISTRY }}/$REPOSITORY_NAME:$IMAGE_TAG
          docker push ${{ secrets.ECR_REGISTRY }}/$REPOSITORY_NAME:$IMAGE_TAG

      # --- Web-Admin Build Steps ---
      - name: Setup Node.js (Web-Admin)
        if: matrix.project == 'web-admin'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'web-admin/package-lock.json'

      - name: Install dependencies (Web-Admin)
        if: matrix.project == 'web-admin'
        working-directory: web-admin
        run: npm ci

      - name: Build Next.js app (Web-Admin)
        if: matrix.project == 'web-admin'
        working-directory: web-admin
        run: npm run build

      - name: Upload Web-Admin build artifact
        if: matrix.project == 'web-admin'
        uses: actions/upload-artifact@v4
        with:
          name: web-admin-build
          path: web-admin/.next # Path to the Next.js build output
          retention-days: 1 # Keep artifact for a short period

      # --- Mobile Build Steps (Expo EAS) ---
      - name: Setup Node.js (Mobile)
        if: matrix.project == 'mobile'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'mobile/package-lock.json'

      - name: Install dependencies (Mobile)
        if: matrix.project == 'mobile'
        working-directory: mobile
        run: npm ci

      - name: Install Expo CLI (Mobile)
        if: matrix.project == 'mobile'
        run: npm install -g eas-cli

      - name: Login to Expo (Mobile)
        if: matrix.project == 'mobile'
        working-directory: mobile
        run: eas login --token ${{ secrets.EXPO_TOKEN }}

      - name: Trigger EAS Build (Mobile)
        if: matrix.project == 'mobile'
        working-directory: mobile
        run: eas build --platform all --profile preview --non-interactive

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build # Depends on successful builds
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # --- Backend Staging Deployment (Terraform/Kubernetes) ---
      - name: Configure AWS credentials (Backend Staging)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform (Backend Staging)
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.0 # Specify a Terraform version

      - name: Terraform Init (Backend Staging)
        working-directory: infra # Assuming Terraform config for backend is in infra/
        run: terraform init -backend-config="key=backend-staging.tfstate" # Adjust based on your backend config

      - name: Terraform Apply (Backend Staging)
        working-directory: infra
        env:
          BACKEND_IMAGE_TAG: ${{ secrets.ECR_REGISTRY }}/salesmaster-teamhub-backend:${{ github.sha }}
        run: terraform apply -auto-approve -var="image_tag=${{ env.BACKEND_IMAGE_TAG }}" -var="environment=staging" # Pass image tag and environment

      # --- Web-Admin Staging Deployment (Vercel) ---
      - name: Download Web-Admin build artifact
        uses: actions/download-artifact@v4
        with:
          name: web-admin-build
          path: web-admin/.next # Download directly into the expected path

      - name: Deploy Web-Admin to Vercel Staging
        working-directory: web-admin
        run: |
          npm install -g vercel@latest
          # Pull Vercel project settings. This assumes vercel.json is in web-admin/
          vercel pull --yes --token=${{ secrets.VERCEL_TOKEN }} --project-id=${{ secrets.VERCEL_PROJECT_ID }} --org-id=${{ secrets.VERCEL_ORG_ID }}
          # Deploy prebuilt artifact. This will create a preview deployment URL.
          vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }} --project-id=${{ secrets.VERCEL_PROJECT_ID }} --org-id=${{ secrets.VERCEL_ORG_ID }}
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build # Depends on successful builds
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production'
    environment:
      name: production # Requires manual approval if configured in GitHub Environments
      url: https://your-production-app-url.com # Optional: URL for the environment

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # --- Backend Production Deployment (Terraform/Kubernetes) ---
      - name: Configure AWS credentials (Backend Production)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform (Backend Production)
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.0 # Specify a Terraform version

      - name: Terraform Init (Backend Production)
        working-directory: infra
        run: terraform init -backend-config="key=backend-production.tfstate" # Adjust based on your backend config

      - name: Terraform Apply (Backend Production)
        working-directory: infra
        env:
          BACKEND_IMAGE_TAG: ${{ secrets.ECR_REGISTRY }}/salesmaster-teamhub-backend:${{ github.sha }}
        run: terraform apply -auto-approve -var="image_tag=${{ env.BACKEND_IMAGE_TAG }}" -var="environment=production" # Pass image tag and environment

      # --- Web-Admin Production Deployment (Vercel) ---
      - name: Download Web-Admin build artifact
        uses: actions/download-artifact@v4
        with:
          name: web-admin-build
          path: web-admin/.next # Download directly into the expected path

      - name: Deploy Web-Admin to Vercel Production
        working-directory: web-admin
        run: |
          npm install -g vercel@latest
          # Pull Vercel project settings
          vercel pull --yes --token=${{ secrets.VERCEL_TOKEN }} --project-id=${{ secrets.VERCEL_PROJECT_ID }} --org-id=${{ secrets.VERCEL_ORG_ID }}
          # Deploy prebuilt artifact to production
          vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }} --project-id=${{ secrets.VERCEL_PROJECT_ID }} --org-id=${{ secrets.VERCEL_ORG_ID }}
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

      # --- Mobile Production Deployment (Expo EAS Submit) ---
      - name: Setup Node.js (Mobile Production)
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install Expo CLI (Mobile Production)
        run: npm install -g eas-cli

      - name: Login to Expo (Mobile Production)
        working-directory: mobile
        run: eas login --token ${{ secrets.EXPO_TOKEN }}

      - name: Submit iOS build to App Store Connect
        working-directory: mobile
        run: eas submit --platform ios --latest --non-interactive
        env:
          EXPO_APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.EXPO_APPLE_APP_SPECIFIC_PASSWORD }} # Required for submit
          EXPO_APPLE_ID: ${{ secrets.EXPO_APPLE_ID }}
          EXPO_APPLE_TEAM_ID: ${{ secrets.EXPO_APPLE_TEAM_ID }}

      - name: Submit Android build to Google Play
        working-directory: mobile
        run: eas submit --platform android --latest --non-interactive
        env:
          EXPO_GOOGLE_SERVICE_ACCOUNT_KEY: ${{ secrets.EXPO_GOOGLE_SERVICE_ACCOUNT_KEY }} # Required for submit
          EXPO_ANDROID_PACKAGE: your.android.package.name # e.g., com.salesmaster.teamhub
          EXPO_ANDROID_TRACK: internal # Or 'production', 'alpha', 'beta'
